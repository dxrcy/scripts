#!/bin/sh
export INFO='connect or disconnect a particular bluetooth device'

mac='40:DE:17:43:2F:49'
# mac='53:48:46:C6:01:6A'

# Start scanning for all devices, until given MAC address is found
scan_and_wait() {
    bluetoothctl scan on &
    while ! bluetoothctl devices | grep -q "$mac"; do
        sleep 1
    done
    bluetoothctl scan off
    killall bluetoothctl
}
# Returns successful exit if bluetooth device is connected
is_connected() {
    bluetoothctl info $mac | grep -q 'Connected: yes'
}
# Returns successful exit if bluetooth is powered on (enabled)
is_power_on() {
    bluetoothctl show | grep -q 'Powered: yes'
}

get_charge_percent() {
    suffix="$(echo "$mac" | sed 's/:/_/g')"
    device="$(upower --enumerate | grep "$suffix$")"
    upower --show-info "$device" | grep 'percentage:' | awk '{print $2}'
}

# Run subcommand
case "$1" in
    'c'|'connect')
        is_connected && exit 0 # already connected
        bluetoothctl power on
        scan_and_wait
        bluetoothctl connect "$mac" && playerctl play
        ;;

    'd'|'disconnect')
        playerctl pause
        bluetoothctl disconnect "$mac"
        bluetoothctl power off
        # Mute audio when bluetooth disconnected
        sleep 1
        pactl set-sink-volume @DEFAULT_SINK@ 0%
        ;;

    'mac') echo $mac ;;

    'status') is_connected ;;
    'power')  is_power_on ;;

    'charge') get_charge_percent ;;

    'display-status')
        if ! is_power_on;    then echo '󰂲' # power off
        elif ! is_connected; then echo '' # disconnected
                             else echo '' # connected
        fi ;;
    
    'display-charge')
        charge="$(get_charge_percent)"
        charge="${charge%%%}"
        [ -z "$charge" ] && exit 0 # No info found
        charge=$((charge / 10))
        #  ▁▁▂▃▄▅▆▇██
        # 0123456789X
        case "$charge" in
             0) printf ' ' ;;
             1) printf '\u2581' ;;
             2) printf '\u2581' ;;
             3) printf '\u2582' ;;
             4) printf '\u2583' ;;
             5) printf '\u2584' ;;
             6) printf '\u2585' ;;
             7) printf '\u2586' ;;
             8) printf '\u2587' ;;
             9) printf '\u2588' ;;
            10) printf '\u2588' ;;
             *) printf '[?]' ;;
        esac
        echo
        ;;
    *)
        echo 'bt: please provide valid subcommand'
        echo 'USAGE:'
        echo '    bt [SUBCOMMAND]'
        echo 'SUBCOMMANDS:'
        echo '    connect'
        echo '    disconnect'
        echo '    mac'
        echo '    status'
        echo '    power'
        echo '    charge'
        echo '    display-status'
        echo '    display-charge'
        ;;
esac

