#!/bin/sh
export INFO='connect or disconnect a particular bluetooth device'

~/scripts/cmd/require bluetoothctl playerctl pactl || exit $?
# TODO: Use `wpctl` instead of `pactl`

MAC='40:DE:17:43:A1:71' # Good ones
# MAC='40:DE:17:43:2F:49' # Broken ones
# MAC='53:48:46:C6:01:6A' # Other ones
# MAC='68:E6:5C:A6:66:F1' # Airpods

PLAYER='spotify'

# Override built-in printf, for Unicode support with narrowly-compliant shells
printf() { /bin/printf "$@"; }

# Returns 0 if bluetooth device is connected AND charge can be read
# Remove second line if the device doesn't support reading battery percentage
is_connected() {
    bluetoothctl info $MAC | grep -q 'Connected: yes' \
        && [ -n "$(get_charge_percent)" ]
}
# Returns successful exit if bluetooth is powered on (enabled)
is_power_on() {
    bluetoothctl show | grep -q 'Powered: yes'
}
# Get battery charge as percentage (including percentage sign)
get_charge_percent() {
    suffix="$(echo "$MAC" | sed 's/:/_/g')"
    device="$(upower --enumerate | grep "$suffix$")"
    upower --show-info "$device" | grep 'percentage:' | awk '{print $2}'
}
# Mute default sink (for when disconnected)
set_mute() {
    pactl set-sink-volume @DEFAULT_SINK@ 0%
}

print_help() {
    echo "bt: $INFO"
    echo 'USAGE:'
    echo '    bt [SUBCOMMAND]'
    echo 'SUBCOMMANDS:'
    echo '    connect'
    echo '    disconnect'
    echo '    reconnect'
    echo '    mute-if-disconnected'
    echo '    mac'
    echo '    status'
    echo '    power'
    echo '    charge'
    echo '    display-status'
    echo '    display-charge'
}

# Run subcommand
case "$1" in
    'c'|'connect')
        is_connected && exit 0 # already connected

        bluetoothctl power on || exit 1
        until is_connected; do
            bluetoothctl connect "$MAC" || exit 1
            sleep 0.1
        done

        # Play on connect
        # playerctl -p "$PLAYER" play
        ;;

    'd'|'disconnect')
        playerctl -p "$PLAYER" pause

        bluetoothctl disconnect "$MAC" || exit 1
        bluetoothctl power off || exit 1
        while is_connected; do # Is this needed ???
            sleep 0.1
        done

        set_mute
        ;;

    'r'|'reconnect')
        bluetoothctl power on || exit 1

        play_status="$(playerctl -p "$PLAYER" status)"
        playerctl -p "$PLAYER" pause

        bluetoothctl disconnect "$MAC" || exit 1
        while is_connected; do
            sleep 0.1
        done

        bluetoothctl connect "$MAC" || exit 1
        until is_connected; do
            sleep 0.1
        done

        [ "$play_status" = 'Playing' ] && playerctl -p "$PLAYER" play
        ;;

    'mute-if-disconnected')
        is_connected || set_mute
        ;;

    'mac') echo $MAC ;;
    'status') is_connected ;;
    'power')  is_power_on ;;
    'charge') get_charge_percent ;;

    'display-status')
        if ! is_power_on;    then echo '󰂲' # power off
        elif ! is_connected; then echo '' # disconnected
                             else echo '' # connected
        fi ;;
    
    'display-charge')
        charge="$(get_charge_percent)"
        charge="${charge%%%}"
        charge=$((charge / 10))
        #  ▁▁▂▃▄▅▆▇██
        # 0123456789X
        case "$charge" in
             0) printf ' ' ;;
             1) printf '\u2581' ;;
             2) printf '\u2581' ;;
             3) printf '\u2582' ;;
             4) printf '\u2583' ;;
             5) printf '\u2584' ;;
             6) printf '\u2585' ;;
             7) printf '\u2586' ;;
             8) printf '\u2587' ;;
             9) printf '\u2588' ;;
            10) printf '\u2588' ;;
             *) # No info found, or invalid
                 printf '[?]'
                 exit 1 
                 ;;
        esac
        echo
        ;;

    'h'|'help'|'-h'|'--help')
        print_help
        exit 0
        ;;
    *)
        print_help
        exit 1
        ;;
esac

