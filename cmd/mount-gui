#!/bin/sh
export INFO='mount or unmount a drive with Rofi dialog and udisksctl'

~/scripts/cmd/require udisksctl lsof rofi notify-send find || exit $?

lock_file="$HOME/.cache/mount-gui.lock"
log_file="$HOME/.cache/mount-gui.log"

# Report final message (error or success)
# - Print to stdout
# - Log to file
# - Send desktop notification (with `--notify`)
notify_arg="$1"
report_msg() {
    msg="$1"
    echo "$msg"
    echo "$msg" >> "$log_file"
    if [ "$notify_arg" = '--notify' ]; then
        notify-send "$msg" -t 2000
    fi
}

# Grep for value, by key name, in `udisksctl info` output
info_value() {
    info="$1"
    name="$2"
    [ -n "$info" ] || exit 1
    [ -n "$name" ] || exit 1
    row="$(echo "$info" | grep "$name:")"
    [ -n "$row" ]  || exit 1
    echo "$row" | tr -s ' ' | cut -d ' ' -f3-
}

# Wait for lockfile to be removed
# Give up after a certain time
if [ -e "$lock_file" ]; then
    echo 'Waiting for lockfile...'
    interval=0.1
    max_attempts=40 # 4 seconds
    attempts=0
    while [ -e "$lock_file" ]; do
        if [ "$attempts" -gt "$max_attempts" ]; then
            msg="Waited too long for process lock. try removing $lock_file if this error persists."
            report_msg "$msg"
            exit 1
        fi
        sleep "$interval"
        attempts=$((attempts + 1))
    done
    echo 'Ready.'
fi

# Find all mountable drives
# NOTE: This only searchs for `sdXX` devices! (works for my system)
available=''
busy=''
for drive in $(find /dev/ -maxdepth 1 | grep '/dev/sd[a-z][0-9]*'); do
    # Get device information
    info="$(udisksctl info -b "$drive")"
    type="$( info_value "$info" 'IdType'  || exit 1)"
    label="$(info_value "$info" 'IdLabel' || exit 1)"
    mount="$(info_value "$info" 'MountPoints')"
    # Required to mount/unmount
    [ -n "$type" ] || continue

    # Format string with markdown, to display device entry
    is_busy=
    entry=
    if [ -n "$mount" ]; then
        # If in use (has open files): disable, and show as message
        echo "$mount"
        if [ -n "$(lsof +f -- "$mount")" ]; then
            is_busy=true
        else
            entry="<span foreground='yellow'> Unmount </span>"
        fi; else
            entry="<span foreground='lime'  >  Mount  </span>"
    fi
    entry="<b><span background='#071217'>$entry</span></b>"
    entry="$entry$(printf '  <b>%-12s</b>'              "$label")"
    entry="$entry$(printf ' %-12s'                      "$drive")"
    entry="$entry$(printf ' <small><i>%-7s</i></small>' "$type")"
    entry="$entry$(printf ' <b>%s</b>'                  "$mount")"
    entry="<tt>$entry</tt>"

    # Add to list, separated by newline
    if [ -n "$is_busy" ]; then
        [ -z "$busy" ] && busy='Some devices are in use:'
        busy="$busy
$entry"
    else
        available="$available$entry
"
    fi
done

# Read input with Rofi
prompt='Mount or unmount a drive'
rofi_cmd() {
    printf '%s' "$available" \
        | rofi -dmenu -i -markup-rows -p "$prompt" "$@"
}
# Run with 'message' for busy devices
if [ -n "$busy" ]; then
    answer="$(rofi_cmd -mesg "$busy")"
else
    answer="$(rofi_cmd)"
fi

# Cancelled
if [ -z "$answer" ]; then
    echo 'Cancelled'
    exit 0
fi

# Extract device file path from answer
drive="$(echo "$answer" | grep -oP '/dev/[^ ]*')"
[ -n "$drive" ] || exit 1

# Get information of drive
# This is redundant, but the best way I could think of
info="$(udisksctl info -b "$drive")"
type="$( info_value "$info" 'IdType'  || exit 1)"
mount="$(info_value "$info" 'MountPoints')"

# Lock other instances of this script
touch "$lock_file"

# Unmount if already mounted, otherwise mount
# Capture both stdout and sterr
[ -n "$mount" ] \
    && msg="$(udisksctl unmount -b "$drive" 2>&1)" \
    || msg="$(udisksctl mount -b "$drive" -t "$type" 2>&1)"
code="$?"

report_msg "$msg"
rm "$lock_file"
exit "$code"

