#!/bin/sh
export INFO='change volume or brightness, with notification'

~/scripts/cmd/require bc pactl wpctl brightnessctl dunstify
# TODO: Implement `mt` with `wpctl` (removes `pactl` dependency)

# TODO: Rename subcommands

# Note: `brightnessctl` can be replaced with `xbacklight`, but this requires
# modifying `/etc/sudoers` to allow `xbacklight` to run as root without a
# password.

# Percentage modifier of right channel, to left
VOLUME_BALANCE_RIGHT=98
# Control options
STEP_VOLUME=5
STEP_BRIGHTNESS=5
VOLUME_MAX=100
# Notification options
BAR_COLOR="#7f7fff"
TIMEOUT=1000
DUNST_ID="2593"
# Icons
ICON_VOLUME_MUTE=''
ICON_VOLUME_LOW=''
ICON_VOLUME_HIGH=''
ICON_BRIGHTNESS=''
ICON_MICROPHONE_MUTE=''
ICON_MICROPHONE_ON=''

show_help() {
    cat << EOF
$(basename "$0"): $INFO
    v+  Increase volume
    v-  Decrease volume
    vm  Mute/unmute volume
    b+  Increase brightness
    b-  Decrease brightness
    mt  Toggle microphone
    m0  Mute microphone
    m1  Unmute microphone
    display-volume          Display volume value with icon
    display-mic             Display microphone status with icon
    display-brightness      Display brightness value with icon
EOF
}

# Returns 0 if muted, 1 if unmuted
is_mute() {
    wpctl get-volume @DEFAULT_SINK@ | grep -q '[MUTED]'
}

# Returns 0 if ALL microphones are disabled, otherwise 1
is_any_mic_enabled() {
    ! pactl list sources | grep -q 'Mute: yes'
}

to_percent() {
    echo "$1 * 100" \
        | bc \
        | sed 's/\.00$//'
}

# Only supports mono-audio
get_volume() {
    volume=$(wpctl get-volume @DEFAULT_SINK@ \
        | awk '{print $2}')
    to_percent "$volume"
}

get_brightness() {
    value=$(brightnessctl get)
    max=$(brightnessctl max)
    percent=$((100 * value / max))
    echo "$percent"
}

toggle_all_mics() {
    if is_any_mic_enabled;
        then disable_all_mics
        else enable_all_mics
    fi
}

disable_all_mics() {
    for source in $(pactl list short sources | awk '{print $1}'); do
        pactl set-source-mute "$source" 'yes'
    done
}
enable_all_mics() {
    for source in $(pactl list short sources | awk '{print $1}'); do
        pactl set-source-mute "$source" 'no'
    done
}

notify() {
    text="$1"
    icon="$2"
    shift 2
    # `dunst --replace` currently triggers segfault:
    # https://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg2021298.html
    # Instead clear all notifications
    dunstctl close-all
    dunstify \
        "$icon $text" \
        --icon none \
        --timeout "$TIMEOUT" \
        --urgency normal \
        "$@"
        # --replace "$DUNST_ID" \
}

notify_progress() {
    value="$1"
    icon="$2"
    notify "$value%" "$icon" \
        --hints "int:value:$value" \
        --hints "string:hlcolor:$BAR_COLOR"
}

get_icon_volume() {
    if [ "$value" -eq 0 ] || is_mute; then
        echo "$ICON_VOLUME_MUTE"
    elif [ "$value" -lt 50 ]; then
        echo "$ICON_VOLUME_LOW"
    else
        echo "$ICON_VOLUME_HIGH"
    fi
}

notify_volume() {
    value=$(get_volume)
    icon="$(get_icon_volume)"
    notify_progress "$value" "$icon"
}

notify_brightness() {
    value=$(get_brightness)
    notify_progress "$value" "$ICON_BRIGHTNESS"
}

notify_microphone() {
    if is_any_mic_enabled; then
        text='Microphone ENABLED'
        icon="$ICON_MICROPHONE_ON"
    else
        text='Microphone disabled'
        icon="$ICON_MICROPHONE_MUTE"
    fi
    notify "$text" "$icon"
}

display_volume() {
    value=$(get_volume)
    icon="$(get_icon_volume)"
    echo "$icon $value%"
}

display_mic() {
    if is_any_mic_enabled; then
        echo $ICON_MICROPHONE_ON
    else
        echo $ICON_MICROPHONE_MUTE
    fi
}

display_brightness() {
    value=$(get_brightness)
    echo "$ICON_BRIGHTNESS $value%"
}

add_saturating() {
    lhs="$1"
    rhs="$2"
    max="$3"
    result=$((lhs + rhs))
    if [ "$result" -ge "$max" ];
        then echo "$max"
        else echo "$result"
    fi
}
sub_saturating() {
    lhs="$1"
    rhs="$2"
    min="$3"
    result=$((lhs - rhs))
    if [ "$result" -le "$min" ];
        then echo "$min"
        else echo "$result"
    fi
}

set_volume() {
    value="$1"
    value_left=$((value))
    value_right=$((value * VOLUME_BALANCE_RIGHT / 100))
    amixer sset Master "$value_left%,$value_right%"
}

command="$1"
case "$command" in

    v+)
        wpctl set-mute @DEFAULT_SINK@ 0
        value=$(add_saturating "$(get_volume)" $STEP_VOLUME $VOLUME_MAX)
        set_volume "$value"
        notify_volume
        ;;
    v-)
        wpctl set-mute @DEFAULT_SINK@ 0
        value="$(sub_saturating "$(get_volume)" $STEP_VOLUME 0)"
        set_volume "$value"
        notify_volume
        ;;
    vm)
        wpctl set-mute @DEFAULT_SINK@ toggle
        notify_volume
        ;;

    b+)
        brightnessctl set "+$STEP_BRIGHTNESS% "
        notify_brightness
        ;;
    b-)
        brightnessctl set "$STEP_BRIGHTNESS%-"
        notify_brightness
        ;;

    mt)
        toggle_all_mics
        notify_microphone
        ;;
    m0)
        disable_all_mics
        notify_microphone
        ;;
    m1)
        enable_all_mics
        notify_microphone
        ;;

    display-volume)
        display_volume
        ;;

    display-mic)
        display_mic
        ;;

    display-brightness)
        display_brightness
        ;;

    h|help|-h|--help)
        show_help
        ;;
    *)
        show_help
        exit 1
        ;;

esac

