#!/bin/sh
export INFO='watch a file for changes, to compile and run'

~/scripts/cmd/require inotifywait || exit 1

TIMEOUT=100
TIMESTAMP_FILE="/tmp/runs-$$"

show_help() {
    echo "runs: $INFO"
    echo
    echo 'USAGE:'
    echo '    runs [OPTIONS] [...COMMAND]'
    echo
    echo 'OPTIONS:'
    echo '    -d, --directory DIRECTORY'
    echo '        File or directory to watch, default: .'
    echo '    -t, --timeout TIMEOUT'
    echo "        Timeout in milliseconds to postpone run, default: $TIMEOUT"
    echo '    -p, --postpone'
    echo '        Postpone run until next event'
    echo '    -s, --shell'
    # shellcheck disable=SC2016
    echo '        Shell to use, default: $SHELL or $(which sh)'
    echo
    echo 'ARGUMENTS:'
    echo '    COMMAND:'
    echo '        Shell command to run on event, with substitutions below'
    echo
    echo 'COMMAND SUBSTITUTIONS:'
    echo '    %d  Directory of file               path/to/'
    echo '    %n  Filename without directory      file.txt'
    echo '    %f  Full filename and directory     path/to/file.txt'
    echo '    %N  Filename without extension      file'
    echo '    %e  File extension                  txt'
    echo '    %E  Events type                     CREATE|MODIFY|DELETE'
    exit 0
}

dir=''
timeout="$TIMEOUT"
postpone=''
file=''
shell=''

while [ "$1" != "${1#-}" ]; do

    flag="$1"
    shift

    case "$flag" in

        -h | --help)
            show_help
            ;;

        -d | --directory)
            if [ -z "$1" ]; then
                echo "runs: missing value for $flag." >&2
                exit 1
            fi
            if [ -n "$dir" ]; then
                echo "runs: cannot specify more than one directory." >&2
                exit 1
            fi
            dir="$1"
            shift
            ;;

        -t | --timeout)
            if [ -z "$1" ]; then
                echo "runs: missing value for $flag." >&2
                exit 1
            fi
            timeout="$1"
            shift
            ;;

        -s | --shell)
            if [ -z "$1" ]; then
                echo "runs: missing value for $flag." >&2
                exit 1
            fi
            shell="$1"
            shift
            ;;

        -p | --postpone) postpone=1 ;;

        *)
            echo "runs: invalid option: $flag" >&2
            exit 1
    esac
done

if [ -z "$dir" ]; then
    dir='.'
elif [ -f "$dir" ]; then
    file="$dir"
    dir="$(dirname "$dir")"
elif [ ! -e "$dir" ]; then
    echo "runs: file or directory not exist: $dir" >&2
    exit 1
fi

command_template=$*
if [ -z "$command_template" ]; then
    echo 'runs: missing command.' >&2
    exit 1
fi

# Find appropriate shell if none specified
if [ -z "$shell" ]; then
    shell="$SHELL"
fi
if [ -z "$shell" ]; then
    shell="$(which sh)"
fi
if [ -z "$shell" ]; then
    shell='/usr/bin/sh'
fi
if [ ! -x "$shell" ]; then
    echo "runs: shell not executable: $shell" >&2
    exit 1
fi

execute() {
    basepath="$1"
    events="$2"
    filename="$3"

    fullpath="$basepath/$filename"
    basename="${file%.*}"
    extension="${file##*.}"

    command="$(echo "$command_template" \
        | sed "s|%d|$basepath|g" \
        | sed "s|%n|$filename|g" \
        | sed "s|%f|$fullpath|g" \
        | sed "s|%N|${basename}|g" \
        | sed "s|%e|${extension}|g" \
        | sed "s|%E|${events}|g" \
    )"

    printf "\n\033[1m%s\033[0m\n" "$command"
    clear

    # Kill previous command, and any children
    if [ -n "$running" ] && kill -0 "$running" 2>/dev/null; then
        kill "$running" $(pgrep -P "$running")
    fi

    # Fork and run in new (interactive) shell, in new session
    setsid "$shell" -ci "$command" &
    running=$!
}

if [ -z "$postpone" ]; then
    if [ -n "$file" ];
        then filename="$file"
        else filename=''
    fi
    execute './' 'INITIAL' "$filename"
fi

self=$$

{
    inotifywait \
        --monitor \
        --event modify \
        --recursive \
        --exclude '.*/\.git/.*' \
        --quiet \
        "$dir" \
    || kill "$self"
} | while read -r basepath events filename; do

    if [ -n "$file" ] \
        && [ ! "$(realpath "$basepath/$filename")" = "$(realpath "$file")" ]
    then
        continue
    fi

    # Ignore filenames which are numbers or end with tilde
    if echo "$filename" | grep -qE '()^[0-9]+$|~$'; then
        continue
   fi

    # Don't run if previously ran in the last TIMEOUT milliseconds
    now="$(date +%s%N | cut -b1-13)"
    if [ -f "$TIMESTAMP_FILE" ] \
        && [ "$(cat "$TIMESTAMP_FILE")" -gt "$((now - timeout))" ]; then
        continue
    fi
    echo "$now" > "$TIMESTAMP_FILE"

    run "$basepath" "$events" "$filename"

done

