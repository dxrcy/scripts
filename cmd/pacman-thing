#!/bin/sh
export INFO="use pacman/paru with a 'nicer' sytax"

# Pacman subcommand (like -Syu) is first argument
cmd="$1"
# Pacman mode [normal|sudo|paru]
mode='normal'

# If no command given, run paru
if [ ! "$cmd" ]; then
    paru
    exit $?
fi

# Remove $1 from $@
shift

# First character, and rest of string
first="$(echo "$cmd" | cut -c1)"
rest="$(echo "$cmd" | cut -c2-)"

# 's' for `sudo`, 'p' for `paru`
if [ "$first" = "s" ]; then
    cmd="$rest"
    mode='sudo'
elif [ "$first" = "p" ]; then
    cmd="$rest"
    mode='paru'
fi

# Remove redundant dash
if [ "$(echo "$cmd" | cut -c1)" = "-" ]; then
    cmd="$(echo "$cmd" | cut -c2-)"
fi

# Remove a leading slash from command
if [ "$(printf '%s' "$cmd" | cut -c 1)" = "-" ]; then
    cmd="${cmd#?}"
fi
# Check for empty command like `pacman -`
if [ -z "$cmd" ]; then
    echo 'no command specified.'
    exit 1
fi

# Print a confirmation message to switch to 'sudo' mode
use_sudo() {
    printf '\033[33mthis operation requires root privilege.\033[0m\n'
    printf "use '\033[1msudo\033[0m'? [Y/n] "
    read -r confirm
    case "$confirm" in
        'y'|'Y'|'') mode='sudo' ;;
        *) ;;
    esac
}
# Successfully returns if any characters of $1 are present in $cmd (except first character)
contains() {
    for char in $(echo "$1" | sed 's/./& /g'); do
        if echo "${cmd#?}" | grep -q "$char"; then
            return 0
        fi
    done
    return 1
}

# Check if command needs sudo
[ "$mode" = 'normal' ] && case "$cmd" in
    #TODO add more cases
    R*|U*|S)            use_sudo ;;
    S*) contains yuc && use_sudo ;;
    *) ;;
esac

# Whole command to run
# Dash is added back here
final=""
case "$mode" in
    'normal') final="pacman -$cmd $*" ;;
    'sudo')   final="sudo pacman -$cmd $*" ;;
    'paru')   final="paru -$cmd $*" ;;
esac

# Show command, and run
printf '\033[2m%s\033[0m\n' "$final"
eval "$final"

