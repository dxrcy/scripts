#!/bin/sh
export INFO='translate text, using Glosbe.com API'

~/scripts/cmd/require curl jq || exit $?

# Source language code
src="$1"
# Destination language code
dst="$2"

# Validate language codes
if [ ! "$src" ]; then
    echo 'translate: no source language'
    exit 1
fi
if [ ! "$dst" ]; then
    echo 'translate: no destination language'
    exit 2
fi
if [ ! "${#src}" = 2 ]; then
    echo 'translate: source language code must be 2 characters'
    exit 3
fi
if [ ! "${#dst}" = 2 ]; then
    echo 'translate: destination language code must be 2 characters'
    exit 4
fi

# Everything else is text to translate
shift 2
input="$*"
# Empty input
if [ ! "$input" ]; then
    echo
    exit 0
fi

# File to save cached translations to
cache_file="$HOME/.cache/translate"
# Cache line starts with this. Eg. `en:::eo:::Some text here:::`
cache_prefix="$src:::$dst:::$input:::"
# Find an existing cached translation
cached="$(test -f "$cache_file" && grep "^$cache_prefix" "$cache_file" | tail -n1)"

if [ "$cached" ]; then
    # Already cached
    # Print everything after separator
    echo "${cached##*:::}"
else
    # Send curl request, and get http code
    res="$(
        curl "https://translator-api.glosbe.com/translateByLangWithScore?sourceLang=$src&targetLang=$dst"\
            -s \
            -H 'Content-Type: text/plain;charset=UTF-8'\
            --data-raw "$input" \
            --write-out "\n%{http_code}"
    )"
    # Separate text and status
    text="$(  echo "$res" | head -n -1)"
    status="$(echo "$res" | tail -n 1)"

    # Unsuccessful http status
    if [ ! "$status" = 200 ]; then
        [ ! "$status" ] && status="[unknown]"
        echo "translate: invalid request with response status $status"
        echo "$text"
        exit 5
    fi

    # Try to parse as json, and extract `"translation"` key, or fail
    answer="$(
        echo "$text" | jq -r '.translation' 2> /dev/null || {
            echo 'translation: failed to parse response as appropriate json'
            echo "$text"
            exit 6
        }
    )"
    echo "$answer"

    # Save cache
    echo "$cache_prefix$answer" >> "$cache_file"
fi


