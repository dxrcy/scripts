#!/bin/sh
export INFO='get information about Git repo status for a directory'

~/scripts/cmd/require git || exit $?

# Parse arguments
while [ "$#" -gt 0 ]; do
    case "$1" in 
        -h|--help)
            echo "git-info: $INFO"
            echo 'USAGE:'
            echo '    git-info [DIRECTORY] [OPTIONS]'
            echo 'ARGUMENTS:'
            echo '    DIRECTORY (optional)'
            echo 'OPTIONS:'
            echo '    -b  --branch     only echo current git branch'
            echo '    -e  --existing   fail if directory is not a git repo'
            echo '    -f  --fancy      print output with color'
            echo '    -l  --list       list info for all repos in directory'
            echo '    -a  --all        include directories without repo or info (with --list)'
            exit 0
            ;;
        -b|--branch)   only_branch=1 ;;
        -e|--existing) must_be_repo=1 ;;
        -f|--fancy)    fancy_output=1 ;;
        -l|--list)     list_dirs=1 ;;
        -a|--all)      list_all=1 ;;
        -*)
            echo "git-info: unknown option '$1'."
            exit 1
            ;;
        '') ;;
        *)
            [ ! "$dir" ] || {
                echo "git-info: unexpected argument '$1'."
                exit 1
            } && dir="$1"
        ;;
    esac
    shift
done

# Change directory
if [ -n "$dir" ]; then
    if [ ! -d "$dir" ]; then
        echo "git-info: not a directory: '$dir'."
        exit 1
    fi
    cd "$dir" || exit 1
fi

# Run command for each subdirectory
if [ -n "$list_dirs" ]; then
    if [ -n "$must_be_repo" ]; then
        echo "git-info: cannot use '--existing' options with '--list'"
        exit 1
    fi
    for i in *; do
        # Must be directory
        [ -d "$i" ] || continue

        # Run command
        [ -n "$only_branch" ] && args='--branch'
        if ! info="$($0 "$i" "$args")"; then
            # Failed
            echo "$info"
            exit 1
        fi

        # Must have information (unless --all)
        [ ! "$info" ] && [ -z "$list_all" ] && continue

        # Print info
        [ -n "$fancy_output" ] \
            && printf '\033[31m%s\033[0m' "$info" \
            || printf '%s' "$info"
        # Pad with spacing
        [ -n "$only_branch" ] \
            && len=8 \
            || len=2
        for _ in $(seq $((len - ${#info}))); do
            printf ' '
        done
        # Print directory name
        printf ' %s\n' "$i"
    done
    exit 0
fi
if [ -n "$fancy_output" ]; then
    echo "git-info: cannot use '--fancy' options without '--list'"
    echo "  (not yet implemented)"
    exit 1
fi
if [ -n "$list_all" ]; then
    echo "git-info: cannot use '--all' options without '--list'"
    exit 1
fi

# Not a git repo
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    if [ -n "$must_be_repo" ]; then
        echo 'git-info: directory is not a git repo.'
        exit 1
    else
        exit 0
    fi
fi

# Current branch
if [ -n "$only_branch" ]; then
    branch="$(git branch --show-current)"
    if [ -n "$fancy_output" ]; then
        echo " $branch"
    else
        echo "$branch"
    fi
    exit 0
fi

# Uncommitted changes
changes_status()  {
    if [ -n "$(git status --porcelain)" ]; then
        echo '?'
    fi
}
# Current branch synced with remote (unpulled, unpushed)
sync_status() {
    branch="$(git branch --show-current)"
    # Unknown branch
    if [ -z "$branch" ]; then
        echo '*'
        return
    fi
    # No remotes exist
    [ "$(git remote -v)" ] || return
    # Unpulled ?
    if ! git rev-parse --verify "origin/$branch" >/dev/null 2>&1; then
        echo '↓' 
        return
    fi
    # Unpushed
    if [ -n "$(git log "origin/$branch..$branch")" ]; then
        echo '↑'
    fi
}

# Print output
info="$(changes_status)$(sync_status)"
if [ -n "$info" ]; then
    echo "$info"
fi

